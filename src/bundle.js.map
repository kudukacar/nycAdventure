{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game.js","webpack:///./src/main.js","webpack:///./src/sound.js","webpack:///./src/walker.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA8B;AACF;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAM;AAChC,6BAA6B,8CAAK;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;AChGnB;AAAA;AAA0B;;;AAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAI;AACjC;AACA;AACA,S;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAI;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAAI;AACjC;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;AC/CD;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;ACpBpB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sG;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEe,qEAAM,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import Walker from \"./walker\";\nimport Sound from \"./sound\";\n\nclass Game {\n    constructor(ctx, document, canvas, time, intervalTime) {\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.document = document;\n        this.time = time;\n        this.x = [400, 800, 1200];\n        this.dx = 2;\n        this.intervalTime = intervalTime;\n        this.poopIntervals = [this.movePoopInterval0, this.movePoopInterval1, this.movePoopInterval2];\n        this.checkGameOverInterval;\n        this.walker = new Walker(this.ctx, this.document, this.time);\n        this.poopSound = new Sound(\"sounds/sound2.mp4\", this.document);\n        this.gameOver = false;\n    }\n\n    drawPoop(i) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.x[i] - 50, 390);\n        this.ctx.quadraticCurveTo(this.x[i] - 40, 350, this.x[i] - 60, 380);\n        this.ctx.quadraticCurveTo(this.x[i] - 80, 390, this.x[i] - 50, 390);\n        this.ctx.quadraticCurveTo(this.x[i] - 10, 390, this.x[i], 385);\n        this.ctx.quadraticCurveTo(this.x[i] - 70, 350, this.x[i] - 50, 390);\n        this.ctx.fillStyle = \"saddlebrown\";\n        this.ctx.fill();\n    }\n\n    movePoop(i) {\n        this.poopIntervals[i] = setInterval(() => {\n            this.ctx.clearRect(this.x[i] - 60, 350, 65, 65);\n            this.drawPoop(i);\n            if (this.x[i] === 0) {\n                this.x[i] = 1200;\n            }\n            const collision = this.walker.xPosition() >= this.xPositionEnd(i) && this.walker.xPosition() <= this.x[i];\n            if (this.walker.yPosition() >= this.yPositionStart() && collision) {\n                this.poopSound.play();\n                this.gameOver = true;\n            }\n\n            if(this.gameOver === true) {\n                clearInterval(this.poopIntervals[i]);\n            }\n            if (this.walker.xPosition() >= 1100) {\n                clearInterval(this.poopIntervals[i]);\n                this.canvas.style.animationPlayState = 'paused';\n            }\n            this.x[i] -= this.dx;\n        }, this.intervalTime[i])\n    }\n\n    checkGameOver() {\n        this.checkGameOverInterval = setInterval(() => {\n            if (this.gameOver === true) {\n                this.walker.collision();\n                this.canvas.style.animationPlayState = 'paused';\n                this.ctx.font = \"34px sans-serif\";\n                this.ctx.fillStyle = \"black\";\n                this.ctx.textAlign = \"center\";\n                this.ctx.fillText(\"Find a patch of grass to clean your shoes!\", canvas.width / 2, canvas.height / 2);\n                setTimeout(() => {\n                    this.document.location.reload();\n                }, 2500)\n            }\n            if(this.gameOver === true) {\n                clearInterval(this.checkGameOverInterval);\n            }\n        }, 5)\n    }\n\n    xPositionEnd(i) {\n        return this.x[i] - 55;\n    }\n\n    yPositionStart() {\n       return 385\n    }\n\n    play() {\n        for(let i = 0; i < this.x.length; i++) {\n            this.movePoop(i);\n        }\n        this.walker.walk();\n        this.checkGameOver();\n        return this.document.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            if (e.keyCode === 32) {\n                return this.walker.jump();\n            }\n        })\n    }\n}\n\nexport default Game;","import Game from './game';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const level1 = document.getElementById(\"level1\");\n    const time1 = 200;\n    const intervalTime1 = [20, 20, 20];\n    const level2 = document.getElementById(\"level2\");\n    const time2 = 150;\n    const intervalTime2 = [15, 15, 15];\n    const level3 = document.getElementById(\"level3\");\n    const time3 = 100;\n    const intervalTime3 = [10, 10, 10];\n    canvas.style.animationPlayState='paused';\n    let replay = false;\n    level1.addEventListener('click', (e) => {\n        if (replay === false) {\n            e.preventDefault();\n            replay = true;\n            ctx.clearRect(0, 0, 1200, 400);\n            const game = new Game(ctx, document, canvas, time1, intervalTime1);\n            game.play();\n            canvas.style.animationPlayState = 'running';\n        } \n    }) \n    level2.addEventListener('click', (e) => {\n        if (replay === false) {\n            e.preventDefault();\n            replay = true;\n            ctx.clearRect(0, 0, 1200, 400);\n            const game = new Game(ctx, document, canvas, time2, intervalTime2);\n            game.play();\n            canvas.style.animationPlayState = 'running';\n        }\n    }) \n    level3.addEventListener('click', (e) => {\n        if (replay === false) {\n            e.preventDefault();\n            replay = true;\n            ctx.clearRect(0, 0, 1200, 400);\n            const game = new Game(ctx, document, canvas, time3, intervalTime3);\n            game.play();\n            canvas.style.animationPlayState = 'running';\n        }\n    }) \n})\n","class Sound {\n    constructor(src, document) {\n        this.document = document;\n        this.sound = this.document.createElement(\"audio\");\n        this.sound.src = src;\n        this.sound.setAttribute(\"preload\", \"auto\");\n        this.sound.setAttribute(\"controls\", \"none\");\n        this.sound.style.display = \"none\";\n        this.document.body.appendChild(this.sound);\n    }\n\n    play() {\n        this.sound.play();\n    }\n    \n    stop() {\n        this.sound.pause();\n    }\n}\n\nexport default Sound;","class Walker {\n    constructor(ctx, document, time) {\n        this.ctx = ctx;\n        this.document = document;\n        this.time = time;\n        this.figure = new Image();\n        this.figure.src = 'images/walker4.png';\n        this.jumper = new Image();\n        this.jumper.src = 'images/jumper.png';\n        this.sx = [540, 1040, 1540];\n        this.i = 0;\n        this.dx = -100;\n        this.jumping = false;\n        this.walkInterval;\n        this.gameOver = false;\n    }\n\n    walk() {\n        this.jumping = false;\n        this.walkInterval = setInterval(() => {\n            this.ctx.clearRect(this.dx, 200, 200, 200);\n            this.ctx.drawImage(this.figure, this.sx[this.i % 3], 150, 500, 500, this.dx, 200, 200, 200);\n\n            if(this.dx >= 900) {\n                this.collision();\n                // this.ctx.clearRect(this.dx, 200, 200, 200);\n                // this.ctx.drawImage(this.figure, 40, 150, 500, 500, this.dx, 200, 200, 200);\n                this.ctx.font = \"34px sans-serif\";\n                this.ctx.fillStyle = \"white\";\n                this.ctx.textAlign = \"center\";\n                this.ctx.fillText(\"You made it home spot free!\", canvas.width / 2, canvas.height / 2); \n                setTimeout(() => {\n                    this.document.location.reload();\n                }, 2500)\n            }\n \n            this.i += 1;\n            this.dx += 5;\n        }, this.time)\n    }\n    win() {\n\n    }\n\n\n    jump() {\n        if(this.gameOver === false) {\n            clearInterval(this.walkInterval);\n            this.jumping = true;\n            this.ctx.clearRect(this.dx, 200, 200, 185);\n            this.ctx.drawImage(this.jumper, 1100, 850, 500, 500, this.dx, 200, 200, 180);\n            this.dx += 95;\n            setTimeout(this.walk(), 1000);\n        }\n    }\n\n    collision() {\n        this.gameOver = true;\n        clearInterval(this.walkInterval);\n        // this.ctx.clearRect(this.dx, 200, 200, 200);\n        // this.ctx.drawImage(this.figure, 40, 150, 500, 500, this.dx, 200, 200, 200);\n    }\n\n    xPosition() {\n        return this.dx + 200;\n    }\n\n    yPosition() {\n        if(this.jumping === true) {\n            return 380\n        } else {\n            return 400\n        }\n    }\n\n}\n\nexport default Walker;"],"sourceRoot":""}